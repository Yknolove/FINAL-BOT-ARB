import logging
from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import init_db, ensure_user, set_rates, get_rates, add_deal, get_history, get_top_deals

# Init
init_db()
kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
kb.row(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
kb.row(KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏"))

# State
awaiting_calc = set()

async def start_cmd(msg: types.Message):
    ensure_user(msg.from_user.id, None)
    awaiting_calc.discard(msg.from_user.id)
    await msg.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ –ú–µ–Ω—é –≤–Ω–∏–∑—É.", reply_markup=kb)

async def settings_cmd(msg: types.Message):
    awaiting_calc.discard(msg.from_user.id)
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 42.5 43.0):", reply_markup=kb)

async def process_rates(msg: types.Message):
    parts = msg.text.strip().split()
    if len(parts) == 2 and all(p.replace('.','',1).isdigit() for p in parts):
        b,s = map(float, parts)
        set_rates(msg.from_user.id, b, s)
        awaiting_calc.discard(msg.from_user.id)
        await msg.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: buy={b}, sell={s}", reply_markup=kb)

async def calculator_cmd(msg: types.Message):
    b,s = get_rates(msg.from_user.id)
    if not b or not s:
        await msg.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=kb)
    else:
        awaiting_calc.add(msg.from_user.id)
        await msg.answer(f"–ö—É—Ä—Å—ã: buy={b}, sell={s}
–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (USDT):", reply_markup=kb)

async def process_calc(msg: types.Message):
    if msg.from_user.id not in awaiting_calc:
        return
    text = msg.text.strip()
    if text.replace('.','',1).isdigit():
        amt = float(text)
        b,s = get_rates(msg.from_user.id)
        profit_uah = amt * (s - b)
        profit_usdt = profit_uah / s if s else 0
        add_deal(msg.from_user.id, amt, b, s, profit_uah)
        awaiting_calc.discard(msg.from_user.id)
        await msg.answer(f"–ü—Ä–æ—Ñ–∏—Ç: {profit_uah:.2f} UAH (~{profit_usdt:.2f} USDT)", reply_markup=kb)

async def history_cmd(msg: types.Message):
    awaiting_calc.discard(msg.from_user.id)
    rows = get_history(msg.from_user.id)
    if rows:
        text = "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:
" + "\n".join(
            f"{r['timestamp'][:19]}: {r['amount']}@{r['buy_price']}->{r['sell_price']} profit={r['profit']:.2f}"
            for r in rows
        )
    else:
        text = "–ù–µ—Ç —Å–¥–µ–ª–æ–∫"
    await msg.answer(text, reply_markup=kb)

async def top_cmd(msg: types.Message):
    awaiting_calc.discard(msg.from_user.id)
    rows = get_top_deals()
    if rows:
        text = "–¢–æ–ø —Å–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è:
" + "\n".join(
            f"{r['timestamp'][11:19]} {r['user_id']}: profit={r['profit']:.2f}"
            for r in rows
        )
    else:
        text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    await msg.answer(text, reply_markup=kb)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=["start"])
    dp.register_message_handler(settings_cmd, lambda m: m.text=="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    dp.register_message_handler(process_rates, lambda m: len(m.text.split())==2)
    dp.register_message_handler(calculator_cmd, lambda m: m.text=="üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    dp.register_message_handler(process_calc, lambda m: m.text.replace('.','',1).isdigit())
    dp.register_message_handler(history_cmd, lambda m: m.text=="üìú –ò—Å—Ç–æ—Ä–∏—è")
    dp.register_message_handler(top_cmd, lambda m: m.text=="üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏")
