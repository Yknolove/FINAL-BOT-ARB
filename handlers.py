import logging
from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from db import init_db, ensure_user, set_rates, get_rates, add_deal, get_history, get_top_deals

# Initialize DB
init_db()

# Persistent reply keyboard with menu options
default_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
default_kb.row(KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"))
default_kb.row(KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏"))

async def start_cmd(message: types.Message):
    ensure_user(message.from_user.id, None)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO!", reply_markup=default_kb)

async def settings_cmd(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `42.5 43.0`):",
        reply_markup=default_kb
    )

async def process_rates(message: types.Message):
    parts = message.text.strip().split()
    if len(parts) == 2 and all(p.replace('.', '', 1).isdigit() for p in parts):
        buy, sell = map(float, parts)
        set_rates(message.from_user.id, buy, sell)
        await message.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ø–æ–∫—É–ø–∫–∞={buy}, –ø—Ä–æ–¥–∞–∂–∞={sell}", reply_markup=default_kb)

async def calculator_cmd(message: types.Message):
    buy, sell = get_rates(message.from_user.id)
    if not buy or not sell:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=default_kb)
    else:
        await message.answer(
            f"–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã: –ø–æ–∫—É–ø–∫–∞={buy}, –ø—Ä–æ–¥–∞–∂–∞={sell}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (USD):",
            reply_markup=default_kb
        )

async def process_calculation(message: types.Message):
    text = message.text.strip()
    if text.replace('.', '', 1).isdigit():
        amt = float(text)
        buy, sell = get_rates(message.from_user.id)
        profit = amt * (sell - buy) if buy and sell else 0.0
        add_deal(message.from_user.id, amt, buy, sell, profit)
        await message.answer(f"–ü—Ä–æ—Ñ–∏—Ç: {profit:.2f} USDT", reply_markup=default_kb)

async def history_cmd(message: types.Message):
    rows = get_history(message.from_user.id)
    if rows:
        text = "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n" + "\n".join(
            f"{r['timestamp'][:19]}: {r['amount']}@{r['buy_price']}->{r['sell_price']} (profit={r['profit']:.2f})"
            for r in rows
        )
    else:
        text = "–ù–µ—Ç —Å–¥–µ–ª–æ–∫"
    await message.answer(text, reply_markup=default_kb)

async def top_cmd(message: types.Message):
    rows = get_top_deals()
    if rows:
        text = "–¢–æ–ø —Å–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(
            f"{r['timestamp'][11:19]} {r['user_id']}: profit={r['profit']:.2f}" for r in rows
        )
    else:
        text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    await message.answer(text, reply_markup=default_kb)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=["start"])
    dp.register_message_handler(settings_cmd, lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    dp.register_message_handler(process_rates, lambda m: len(m.text.split()) == 2 and all(p.replace('.', '', 1).isdigit() for p in m.text.split()))
    dp.register_message_handler(calculator_cmd, lambda m: m.text == "üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    dp.register_message_handler(process_calculation, lambda m: m.text.replace('.', '', 1).isdigit())
    dp.register_message_handler(history_cmd, lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
    dp.register_message_handler(top_cmd, lambda m: m.text == "üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏")
