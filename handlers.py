from aiogram import types, Dispatcher
from db import init_db, ensure_user, set_rates, get_rates, add_deal, get_history, get_top_deals
from datetime import datetime

# Initialize DB
init_db()

def menu_kb():
    kb= types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
    )
    kb.add(
        types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
        types.InlineKeyboardButton("üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏", callback_data="top_deals"),
    )
    return kb

async def cmd_start(msg: types.Message):
    payload= msg.get_args() or None
    ref= int(payload) if payload else None
    ensure_user(msg.from_user.id, ref)
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ArbitPRO! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=menu_kb())

async def settings_cb(callback: types.CallbackQuery):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, `42.5 43.0`):")
    await callback.answer()

async def process_rates(msg: types.Message):
    try:
        buy,sell = map(float, msg.text.split())
        set_rates(msg.from_user.id, buy, sell)
        await msg.answer(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –ø–æ–∫—É–ø–∫–∞={buy}, –ø—Ä–æ–¥–∞–∂–∞={sell}")
    except:
        await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `42.5 43.0`.")

async def calculator_cb(callback: types.CallbackQuery):
    buy,sell= get_rates(callback.from_user.id)
    if not buy or not sell:
        await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫—É—Ä—Å—ã –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
    else:
        await callback.message.edit_text(f"–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã: –ø–æ–∫—É–ø–∫–∞={buy}, –ø—Ä–æ–¥–∞–∂–∞={sell}\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (USD):")
    await callback.answer()

async def process_calc(msg: types.Message):
    try:
        amt= float(msg.text)
        buy,sell= get_rates(msg.from_user.id)
        profit= amt*(sell-buy)
        add_deal(msg.from_user.id, amt, buy, sell, profit)
        await msg.answer(f"–ü—Ä–æ—Ñ–∏—Ç: {profit:.2f} USDT")
    except:
        pass

async def history_cb(callback: types.CallbackQuery):
    rows= get_history(callback.from_user.id)
    text= "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:\n" + "\n".join(
        f"{r['timestamp'][:19]}: {r['amount']}@{r['buy_price']}->{r['sell_price']} (profit={r['profit']:.2f})" for r in rows
    ) or "–ù–µ—Ç —Å–¥–µ–ª–æ–∫"
    await callback.message.edit_text(text)
    await callback.answer()

async def top_cb(callback: types.CallbackQuery):
    rows= get_top_deals()
    text= "–¢–æ–ø —Å–¥–µ–ª–∫–∏ —Å–µ–≥–æ–¥–Ω—è:\n" + "\n".join(
        f"{r['timestamp'][11:19]} {r['user_id']}: profit={r['profit']:.2f}" for r in rows
    ) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    await callback.message.edit_text(text)
    await callback.answer()

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_callback_query_handler(settings_cb, lambda c: c.data=="settings")
    dp.register_message_handler(process_rates, lambda m: len(m.text.split())==2 and all(p.replace('.', '', 1).isdigit() for p in m.text.split()))
    dp.register_callback_query_handler(calculator_cb, lambda c: c.data=="calculator")
    dp.register_message_handler(process_calc, lambda m: m.text.replace('.', '', 1).isdigit())
    dp.register_callback_query_handler(history_cb, lambda c: c.data=="history")
    dp.register_callback_query_handler(top_cb, lambda c: c.data=="top_deals")
