"""Telegram bot for P2P arbitrage notifications."""

import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import get_new_configured_app
from aiogram.utils import executor
from aiohttp import web


BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # e.g. https://your.domain/webhook
WEBHOOK_PATH = "/webhook"
PORT = int(os.getenv("PORT", 8443))


bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


def main_menu_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
    ).add(
        types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
        types.InlineKeyboardButton("üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏", callback_data="top_deals"),
    )
    return kb


@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message) -> None:
    welcome_text = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ ArbitPRO!</b>\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n"
        "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ USDT.\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>"
    )
    await message.answer(
        welcome_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=main_menu_keyboard(),
        disable_web_page_preview=True,
    )


@dp.callback_query_handler(lambda c: c.data in [
    "settings", "calculator", "history", "top_deals"])
async def menu_handler(callback: types.CallbackQuery) -> None:
    text_map = {
        "settings": "üîß –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∂–µ–ª–∞–µ–º—ã–µ –∫—É—Ä—Å—ã –∏ –æ–±—ä—ë–º—ã.",
        "calculator": "üßÆ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç.",
        "history": "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.",
        "top_deals": "üî• –¢–æ–ø P2P-—Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
    }
    await callback.message.edit_text(
        text_map.get(callback.data, "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."),
        parse_mode=types.ParseMode.HTML,
        reply_markup=main_menu_keyboard(),
    )
    await callback.answer()


async def handle_root(_: web.Request) -> web.Response:
    return web.Response(text="OK")


async def on_startup(_: web.Application) -> None:
    logging.info("Setting webhook...")
    await bot.set_webhook(WEBHOOK_URL)


async def on_shutdown(_: web.Application) -> None:
    logging.info("Deleting webhook...")
    await bot.delete_webhook()
    await bot.session.close()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_PATH)
    app.router.add_get("/", handle_root)
    app.router.add_head("/", handle_root)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=PORT)
