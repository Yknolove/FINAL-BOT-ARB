import os
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.webhook.aiohttp_server import setup_application
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

print(f"üîê –¢–û–ö–ï–ù: {'–û–ö' if BOT_TOKEN else '‚ùå –úISSING'}")
print(f"üåê WEBHOOK_URL: {WEBHOOK_URL}")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message()
async def handle_message(message: types.Message):
    await message.answer("‚úÖ ArbitPRO —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook!")


async def on_startup(app):
    print("üöÄ –°—Ç–∞—Ä—Ç on_startup...")
    await bot.set_webhook(WEBHOOK_URL)
    print(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")


# –£–î–ê–õ–ï–ù–û –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ webhook –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–±—Ä–æ—Å–∞:
# async def on_shutdown(app):
#     await bot.delete_webhook()

app = web.Application()
app.on_startup.append(on_startup)
# app.on_shutdown.append(on_shutdown)

setup_application(app, dp, path="/webhook")

async def healthcheck(request):
    return web.Response(text="OK")

app.router.add_get("/", healthcheck)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"üåç –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç {port}...")
    web.run_app(app, port=port)
