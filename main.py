BOT_TOKEN = os.getenv( "BOT_TOKEN" )
WEBHOOK_URL = os.getenv( "WEBHOOK_URL" )    # https://your.domain/webhook
# -*- –∫–æ–¥–∏—Ä–æ–≤–∫–∞: utf-8 -*-
"""–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–µ P2P."""
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å‚Äã
–∏–∑ –∏–º–ø–æ—Ä—Ç–∞ aiogram Bot, Dispatcher, —Ç–∏–ø—ã
–∏–∑ –∏–º–ø–æ—Ä—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
 aiogram.utils


BOT_TOKEN = os.getenv( "BOT_TOKEN" )
WEBHOOK_URL = os.getenv( "WEBHOOK_URL" )   # https://your.domain/webhook
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # https://your.domain/webhook
WEBHOOK_PATH = "/webhook"
–ü–û–†–¢         = int (os.getenv( "–ü–û–†–¢" , 8443 ))
–ü–û–†–¢= int (os.getenv( "PORT" , 8443 ))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8443))
WEBHOOK_PATH = "/webhook"
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
–±–æ—Ç = –ë–æ—Ç(—Ç–æ–∫–µ–Ω=BOT_TOKEN)
dp = –î–∏—Å–ø–µ—Ç—á–µ—Ä(–±–æ—Ç)
bot = Bot(token=BOT_TOKEN)
# Create bot even if token is missing or invalid.
_token = BOT_TOKEN if (BOT_TOKEN and ':' in BOT_TOKEN) else '0:dummy'
_token = BOT_TOKEN if BOT_TOKEN and ":" in BOT_TOKEN else "0:dummy"
bot = Bot(token=_token, validate_token=False)
dp = Dispatcher(bot)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard () -> types.InlineKeyboardMarkup:
 
    –∫–± = —Ç–∏–ø—ã.InlineKeyboardMarkup(row_width= 2 )
    –∫–±.–¥–æ–±–∞–≤–∏—Ç—å(
        types.InlineKeyboardButton( "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" , callback_data= "settings" ),

def main_menu_keyboard() -> types.InlineKeyboardMarkup:
    """Return the inline keyboard for the main menu."""
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
    ).–¥–æ–±–∞–≤–ª—è—Ç—å(
        types.InlineKeyboardButton( "üìú –ò—Å—Ç–æ—Ä–∏—è" , callback_data= "history" ),
        types.InlineKeyboardButton( "üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏" , callback_data= "top_deals" ),
    ).add(
        types.InlineKeyboardButton("‚öôÔ∏è Settings", callback_data="settings"),
        types.InlineKeyboardButton("üìà Calculator", callback_data="calculator"),
    )
    kb.add(
        types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
        types.InlineKeyboardButton("üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏", callback_data="top_deals"),
        types.InlineKeyboardButton("üìú History", callback_data="history"),
        types.InlineKeyboardButton("üî• Top deals", callback_data="top_deals"),
    )
    –≤–µ—Ä–Ω—É—Ç—å –∫–±

# /–∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message_handler( –∫–æ–º–∞–Ω–¥—ã=[ "—Å—Ç–∞—Ä—Ç" ] )
async def cmd_start ( —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–∏–ø—ã.–°–æ–æ–±—â–µ–Ω–∏–µ ):
  
    –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ ArbitPRO!</b>

"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞.
    return kb

"
        "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ USDT.
"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

"
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
async def cmd_start(message: types.Message) -> None:
    """Handle the /start command."""
    welcome_text = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ ArbitPRO!</b>\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n"
        "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ USDT.\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>"
    text = (
        "<b>üëã Welcome to ArbitPRO!</b>\n"
        "I am your assistant for P2P arbitrage.\n"
        "üîç I track the best buy and sell offers for USDT.\n"
        "‚öôÔ∏è Configure your limits and get notifications.\n"
        "<i>Select an action below:</i>"
    )
    –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.–æ—Ç–≤–µ—Ç(
        –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç,
    await message.answer(
        welcome_text,
        text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=–≥–ª–∞–≤–Ω–æ–µ_–º–µ–Ω—é_–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞(),
        disable_web_page_preview= –ü—Ä–∞–≤–¥–∞
        reply_markup=main_menu_keyboard(),
        disable_web_page_preview=True,
    )

# –£—Ç–∏–ª–∏—Ç–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–µ –≤ —Å—Ç–∏–ª–µ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ URL
–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ—Ñ send_arbitrage_notification (  
    chat_id: —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ,
    –∏—Å—Ç–æ—á–Ω–∏–∫_–ø–æ–∫—É–ø–∫–∏: —É–ª ,
    buy_rate: –ø–ª–∞–≤–∞—é—â–∏–π ,
    buy_min: —Ü–µ–ª–æ–µ ,
    –∏—Å—Ç–æ—á–Ω–∏–∫_–ø—Ä–æ–¥–∞–∂–∏: —É–ª ,
    sell_rate: –ø–ª–∞–≤–∞—é—â–∏–π ,
    sell_max: —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ,
    profit_pct: –ø–ª–∞–≤–∞—é—â–∏–π ,
    –≤—Ä–µ–º—è_–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: —É–ª ,
    buy_url: —É–ª ,
    sell_url: —É–ª ,

async def send_arbitrage_notification(
    chat_id: int,
    buy_source: str,
    buy_rate: float,
    buy_min: int,
    sell_source: str,
    sell_rate: float,
    sell_max: int,
    profit_pct: float,
    updated_time: str,
    buy_url: str,
    sell_url: str,
):
    —Ç–µ–∫—Å—Ç = (
        "<b>ü™ô –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!</b>

"
) -> None:
    """Send an arbitrage notification to a chat."""
    text = (
        "<b>ü™ô –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!</b>\n"
        f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞:</b> {buy_source}\n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {buy_rate: .2 f} ‚Ç¥\n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {buy_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –æ—Ç {buy_min}$\n\n"
        f"üíº <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_source} \n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {sell_rate: .2 f} ‚Ç¥\n"
        f"üíº <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_source}\n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {sell_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –¥–æ {sell_max}$\n\n"
        f"üìà <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> +{profit_pct:.1f}%\n"
        f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_time}\n\n"
        "#–∞—Ä–±–∏—Ç—Ä–∞–∂ #bybit #binance #p2p"
        "<b>ü™ô Arbitrage opportunity found!</b>\n"
        f"üí∞ <b>Buy:</b> {buy_source}\n"
        f"üè∑Ô∏è <b>Rate:</b> {buy_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>Volume:</b> from {buy_min}$\n\n"
        f"üíº <b>Sell:</b> {sell_source}\n"
        f"üè∑Ô∏è <b>Rate:</b> {sell_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>Volume:</b> up to {sell_max}$\n\n"
        f"üìà <b>Potential profit:</b> +{profit_pct:.1f}%\n"
        f"‚è∞ <b>Updated:</b> {updated_time}\n\n"
        "#arbitrage #p2p"
    )

    –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ = —Ç–∏–ø—ã.InlineKeyboardMarkup(row_width= 2 )
    –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.–¥–æ–±–∞–≤–∏—Ç—å(
        types.InlineKeyboardButton("üîó –û—Ñ–µ—Ä—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É", url=buy_url),
        types.InlineKeyboardButton( "üîó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ" , url=sell_url),
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üîó –û—Ñ–µ—Ä—Ç–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É", url=buy_url),
        types.InlineKeyboardButton("üîó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ", url=sell_url),
        types.InlineKeyboardButton("üîó Buy offer", url=buy_url),
        types.InlineKeyboardButton("üîó Sell offer", url=sell_url),
    )

    –æ–∂–∏–¥–∞–Ω–∏–µ bot.send_message(
    await bot.send_message(
        chat_id=chat_id,
        —Ç–µ–∫—Å—Ç=—Ç–µ–∫—Å—Ç,
        text=text,
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview= –ü—Ä–∞–≤–¥–∞ ,
        reply_markup=–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞,
        disable_web_page_preview=True,
        reply_markup=keyboard,
        disable_web_page_preview=True,
    )


–µ—Å–ª–∏ __name__ == "__main__" :
    executor.start_polling(dp, skip_updates= True )
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
