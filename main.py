import os
import logging

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import get_new_configured_app

# ‚Äî –ö–æ–Ω—Ñ–∏–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# ‚Äî –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN    = os.getenv("BOT_TOKEN")
WEBHOOK_URL  = os.getenv("WEBHOOK_URL")   # e.g. https://your.domain/webhook
WEBHOOK_PATH = "/webhook"
PORT         = int(os.getenv("PORT", 8443))

# ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot)


# ---------------------------
# –£—Ç–∏–ª–∏—Ç–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ embed-—Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–µ
# ---------------------------
async def send_arbitrage_notification(
    chat_id: int,
    buy_source: str,
    buy_rate: float,
    buy_min: int,
    sell_source: str,
    sell_rate: float,
    sell_max: int,
    profit_pct: float,
    updated_time: str,
    buy_url: str,
    sell_url: str,
):
    text = (
        "<b>ü™ô –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
        f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞:</b> {buy_source}\n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {buy_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –æ—Ç {buy_min}$\n\n"
        f"üíº <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_source}\n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {sell_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –¥–æ {sell_max}$\n\n"
        f"üìà <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> +{profit_pct:.1f}%\n"
        f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_time}\n\n"
        "#–∞—Ä–±–∏—Ç—Ä–∞–∂ #bybit #binance #p2p"
    )

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ—Ñ—Ñ–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É", url=buy_url),
        types.InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ—Ñ—Ñ–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", url=sell_url),
    )

    await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )


# ---------------------------
# –í–∞—à–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã /start, –º–µ–Ω—é, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∏—Å—Ç–æ—Ä–∏—è, —Ç–æ–ø-—Å–¥–µ–ª–∫–∏
# ---------------------------
def main_menu_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
    ).add(
        types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
        types.InlineKeyboardButton("üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏", callback_data="top_deals"),
    )
    return kb

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ArbitPRO-–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

@dp.message_handler(commands=["ping"])
async def cmd_ping(message: types.Message):
    await message.reply("pong")

@dp.callback_query_handler(lambda c: c.data in ["settings", "calculator", "history", "top_deals"])
async def process_menu(callback: types.CallbackQuery):
    mapping = {
        "settings":   "–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        "calculator": "–ó–¥–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏.",
        "history":    "–ó–¥–µ—Å—å –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫.",
        "top_deals":  "–ê—Ä—Ö–∏–≤ —Ç–æ–ø-—Å–¥–µ–ª–æ–∫ –¥–Ω—è."
    }
    await callback.message.edit_text(mapping[callback.data], reply_markup=main_menu_keyboard())
    await callback.answer()


# ---------------------------
# Health-check –¥–ª—è Render (GET/HEAD / ‚Üí 200 OK)
# ---------------------------
async def handle_root(request: web.Request) -> web.Response:
    return web.Response(text="OK")


# ---------------------------
# Startup –∏ Shutdown
# ---------------------------
async def on_startup(app: web.Application):
    logging.info("Setting webhook‚Ä¶")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    logging.info("Deleting webhook‚Ä¶")
    await bot.delete_webhook()
    logging.info("Closing bot HTTP session‚Ä¶")
    session = await bot.get_session()
    await session.close()


# ---------------------------
# –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# ---------------------------
if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–∞—Ä—à—Ä—É—Ç–æ–º /webhook
    app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_PATH)

    # –î–æ–±–∞–≤–ª—è–µ–º health-check
    app.router.add_route("GET",  "/", handle_root)
    app.router.add_route("HEAD", "/", handle_root)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫–∏
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    web.run_app(app, host="0.0.0.0", port=PORT)
