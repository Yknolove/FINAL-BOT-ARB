import os
import logging

from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.webhook import get_new_configured_app

# Logging configuration
logging.basicConfig(level=logging.INFO)

# Environment variables
BOT_TOKEN    = os.getenv("BOT_TOKEN")
WEBHOOK_URL  = os.getenv("WEBHOOK_URL")   # https://your.domain/webhook
WEBHOOK_PATH = "/webhook"
PORT         = int(os.getenv("PORT", 8443))

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot)

# Main menu keyboard
def main_menu_keyboard() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton("üìà –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="calculator"),
    ).add(
        types.InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history"),
        types.InlineKeyboardButton("üî• –¢–æ–ø-—Å–¥–µ–ª–∫–∏", callback_data="top_deals"),
    )
    return kb

# /start handler
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    welcome_text = (
        "<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ ArbitPRO!</b>\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n"
        "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ USDT.\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:</i>"
    )
    await message.answer(
        welcome_text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=main_menu_keyboard(),
        disable_web_page_preview=True
    )

# Utility: send embed-style arbitrage notification with URL buttons
async def send_arbitrage_notification(
    chat_id: int,
    buy_source: str,
    buy_rate: float,
    buy_min: int,
    sell_source: str,
    sell_rate: float,
    sell_max: int,
    profit_pct: float,
    updated_time: str,
    buy_url: str,
    sell_url: str,
):
    text = (
        "<b>ü™ô –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!</b>\n"
        f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞:</b> {buy_source}\n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {buy_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –æ—Ç {buy_min}$\n\n"
        f"üíº <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_source}\n"
        f"üè∑Ô∏è <b>–ö—É—Ä—Å:</b> {sell_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –¥–æ {sell_max}$\n\n"
        f"üìà <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> +{profit_pct:.1f}%\n"
        f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_time}\n\n"
        "#–∞—Ä–±–∏—Ç—Ä–∞–∂ #bybit #binance #p2p"
    )

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üîó –û—Ñ–µ—Ä—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É", url=buy_url),
        types.InlineKeyboardButton("üîó –û—Ñ—Ñ–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", url=sell_url),
    )

    await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=types.ParseMode.HTML,
        disable_web_page_preview=True,
        reply_markup=keyboard,
    )

# Callback-query handlers for menu buttons
@dp.callback_query_handler(lambda c: c.data in ["settings", "calculator", "history", "top_deals"])
async def process_menu(callback: types.CallbackQuery):
    mapping = {
        "settings":   "üîß –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∂–µ–ª–∞–µ–º—ã–µ –∫—É—Ä—Å—ã –∏ –æ–±—ä—ë–º—ã.",
        "calculator": "üßÆ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∏ —è –ø–æ—Å—á–∏—Ç–∞—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç.",
        "history":    "üìö –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.",
        "top_deals":  "üî• –¢–æ–ø P2P-—Å–¥–µ–ª–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è."
    }
    text = mapping.get(callback.data, "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await callback.message.edit_text(
        text,
        reply_markup=main_menu_keyboard(),
        parse_mode=types.ParseMode.HTML
    )
    await callback.answer()

# Health-check for Render
async def handle_root(request: web.Request) -> web.Response:
    return web.Response(text="OK")

# Startup and shutdown events
async def on_startup(app: web.Application):
    logging.info("Setting webhook‚Ä¶")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    logging.info("Deleting webhook‚Ä¶")
    await bot.delete_webhook()
    session = await bot.get_session()
    await session.close()
    logging.info("HTTP session closed")

if __name__ == "__main__":
    app = get_new_configured_app(dispatcher=dp, path=WEBHOOK_PATH)
    app.router.add_route("GET",  "/", handle_root)
    app.router.add_route("HEAD", "/", handle_root)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    web.run_app(app, host="0.0.0.0", port=PORT)
