import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import Executor
from aiohttp import web

# Configure logging
logging.basicConfig(level=logging.INFO)

# Environment variables
BOT_TOKEN    = os.getenv("BOT_TOKEN")
WEBHOOK_URL  = os.getenv("WEBHOOK_URL")  # https://‚Ä¶/webhook
WEBHOOK_PATH = "/webhook"
PORT         = int(os.environ.get("PORT", 8443))

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)


# ---------------------------
# Healthcheck handler –¥–ª—è Render
# ---------------------------
async def handle_root(request: web.Request) -> web.Response:
    return web.Response(text="OK")


# ---------------------------
#  –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# ---------------------------
async def send_arbitrage_notification(
    chat_id: int,
    buy_source: str,
    buy_rate: float,
    buy_min: int,
    sell_source: str,
    sell_rate: float,
    sell_max: int,
    profit_pct: float,
    updated_time: str,
    buy_url: str,
    sell_url: str,
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    —Ç–µ–∫—Å—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π, —ç–º–æ–¥–∑–∏ –∏ –¥–≤–µ inline-–∫–Ω–æ–ø–∫–∏.
    """
    text = (
        "<b>ü™ô –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
        f"üí∞ <b>–ü–æ–∫—É–ø–∫–∞:</b> {buy_source}\n"
        f"üè∑ <b>–ö—É—Ä—Å:</b> {buy_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –æ—Ç {buy_min}$\n\n"
        f"üíº <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_source}\n"
        f"üè∑ <b>–ö—É—Ä—Å:</b> {sell_rate:.2f} ‚Ç¥\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> –¥–æ {sell_max}$\n\n"
        f"üìà <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:</b> +{profit_pct:.1f}%\n"
        f"‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {updated_time}\n\n"
        "#–∞—Ä–±–∏—Ç—Ä–∞–∂ #bybit #binance #p2p"
    )

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –æ—Ñ—Ñ–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É", url=buy_url),
        types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –æ—Ñ—Ñ–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", url=sell_url),
    )

    await bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=types.ParseMode.HTML,
        reply_markup=keyboard
    )


# ---------------------------
#  –í–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –º–µ–Ω—é, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∏—Å—Ç–æ—Ä–∏—è, —Ç–æ–ø-—Å–¥–µ–ª–∫–∏
# ---------------------------
@dp.callback_query_handler(lambda c: True)
async def process_menu_callback(callback: types.CallbackQuery):
    data = callback.data
    if data == "settings":
        await callback.message.edit_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    elif data == "calculator":
        await callback.message.edit_text("–ó–¥–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏.")
    elif data == "history":
        await callback.message.edit_text("–ó–¥–µ—Å—å –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫.")
    elif data == "top_deals":
        await callback.message.edit_text("–ê—Ä—Ö–∏–≤ —Ç–æ–ø-—Å–¥–µ–ª–æ–∫ –¥–Ω—è.")
    await callback.answer()


# ---------------------------
# Startup –∏ Shutdown
# ---------------------------
async def on_startup(_):
    logging.info("Setting webhook‚Ä¶")
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to {WEBHOOK_URL}")


async def on_shutdown(_):
    logging.info("Deleting webhook‚Ä¶")
    await bot.delete_webhook()


if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º healthcheck
    app = web.Application()
    app.router.add_route('GET',  '/', handle_root)
    app.router.add_route('HEAD', '/', handle_root)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Executor, –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫ –Ω–µ–º—É –Ω–∞—à–µ app
    executor = Executor(dp)
    executor.set_web_app(app)

    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook-—Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–µ —Å healthcheck
    executor.start_webhook(
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host="0.0.0.0",
        port=PORT,
    )
